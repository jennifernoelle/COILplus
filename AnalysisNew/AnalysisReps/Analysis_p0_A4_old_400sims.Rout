
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # This version doesn't save full probabilities but rather running mean
> # Doesn't save marginal probabilities or latent factors at all
> 
> # --------- TO DO: set  your directories and name the current results files using the date ---------#
> 
> # The directory where the analysis is performed: should already be your WD if you cloned the repo
> #wd_path <- '/Users/camilledesisto/Documents/GitHub/African-Frugivory'
> #wd_path <- "/home/grad/jnk21/projects/African-Frugivory-V2"
> wd_path<- "/hpc/group/dunsonlab/jkampe/African-Frugivory-V3"
> setwd(wd_path)
> 
> # Save results using convention: res_date_i.rda
> date <- 'p0_A4_old_400sims'
> 
> # Where the processed data are saved:
> data_path <- 'ProcessedDataNew/'
> # Where you want to save MCMC results:
> save_path_base <- 'ResultsNew/'
> # Where the functions are available:
> source_path <- 'HelperScriptsJKNew/'
> 
> # Create the results folder
> ifelse(!dir.exists(file.path(save_path_base, date)), dir.create(file.path(save_path_base, date)), FALSE)
[1] FALSE
> save_path <- paste0('ResultsNew/', date, '/')
> 
> # ------ STEP 0: Some functions. --------- #
> 
> source(paste0(source_path, 'UpdExtraVar_function.R'))
> source(paste0(source_path, 'UpdTraitCoef_function.R'))
> source(paste0(source_path, 'UpdLatFac_function.R'))
> source(paste0(source_path, 'UpdProbObs_function.R'))
> source(paste0(source_path, 'UpdOccur_function.R'))
> source(paste0(source_path, 'UpdOccurP_function.R'))
> source(paste0(source_path, 'UpdOccurP_function_blocked.R'))
> source(paste0(source_path, 'UpdRho_function.R'))
> source(paste0(source_path, 'OmegaFromV_function.R'))
> source(paste0(source_path, 'useful_functions.R'))
> source(paste0(source_path, 'CorrMat_function.R'))
> source(paste0(source_path, 'PredictInteractions_function.R'))
> source(paste0(source_path, 'GetPredLatFac_function.R'))
> source(paste0(source_path, 'GetPredWeights_function.R'))
> source(paste0(source_path, 'Utils_OccurP.R'))
> source(paste0(source_path, 'MCMC_function_working.R'))
> 
> library(parallel)
> library(foreach)
> library(abind)
> library(magrittr)
> library(truncnorm)
> 
> # Loading the data:
> load(paste0(data_path, 'Cu_phylo.dat'))
> load(paste0(data_path, 'Cv_phylo.dat'))
> load(paste0(data_path, 'A_obs.dat'))
> load(paste0(data_path, 'F_obs.dat'))
> load(paste0(data_path, 'Obs_X.dat')) # mammal traits
> load(paste0(data_path, 'Obs_W.dat')) # plant traits
> load(paste0(data_path, 'OP_full.dat')) # site level obs plants
> load(paste0(data_path, 'OV_full.dat')) # site level obs verts
> 
> ## Rename for convenience
> Cu <- Cu_phylo
> Cv <- Cv_phylo
> obs_W <- Obs_W
> obs_X <- Obs_X
> obs_A <- A_obs
> obs_F <- F_obs
> 
> ## The following assignments were used in creating obs_OP and obs_OV
> # Species occurs in the same study -> 1
> # Species occurs at the same site, but a different study -> 0.75
> # Species occurs in the same country, but a different site -> 0.5
> # Species occurs in the same zone, but different ... -> 0.25
> 
> ## Old Expert guess: 
> # Same study: 1, same site: 0.75 -> 0.85
> # Same country and habitat: 0.5 -> 0.65, same region and habitat: 0.45 -> 0.35, same habitat only: 0.25,
> # Same country not habitat: 0.1, same region not habitat: 0.05 
> 
> ## New Expert guess: 
> # Same study and site: 1, same site diff study: 0.75 -> 0.85
> # Same country different site: 0.5 -> 0.75, 
> # Same zone: 0.25 -> 0.5
> 
> ## Improved default guess: 0.75/1
> O_P <- ifelse(O_P == 1, 1, 0)
> O_V <- ifelse(O_V ==1, 1, 0)
> 
> # Getting the combined network for the interactions recorded in any study
> comb_A <- apply(obs_A, c(1, 2), sum)
> comb_A <- (comb_A > 0) * 1
> 
> # Useful values
> nP <- ncol(obs_A)
> nV <- nrow(obs_A)
> nS <- dim(obs_A)[3]
> 
> 
> # -------------- STEP 1: Specifications. ------------ #
> 
> Nsims <- 400 #10000 #500 #1000 #5000 # original 10000, reasonable 2500
> thin <-  10 #10 #5 # original 40
> burn <-  floor(Nsims*thin*5) #5 #40000 #2000 #5000 # 2000 # 22000 # original 40000, reasonable 2500
> use_H <- 10 # original 10
> theta_inf <- 0.01
> 
> 
> # Prior distributions:
> stick_alpha <- 5
> prior_theta <- c(1, 1)
> prior_tau <- c(5, 5)
> prior_rho <- c(5, 5)  # I do not update this for now.
> prior_mu0 <- 0
> prior_sigmasq0 <- 10
> prior_sigmasq <- c(1, 1)
> 
> # sampling <- NULL
> sampling <- list(L = TRUE, lambda = TRUE, tau = TRUE, beta = TRUE,
+                  gamma = TRUE, sigmasq = TRUE, sigmasq_p = TRUE,
+                  delta = TRUE, zeta = TRUE, U = TRUE, V = TRUE, v = TRUE,
+                  z = TRUE, theta = TRUE, pis = TRUE, pjs = TRUE, rU = TRUE,
+                  rV = TRUE, miss_X = TRUE, miss_W = TRUE, O_B = TRUE,
+                  O_P = TRUE, p_OB = FALSE, p_OP = FALSE)
> 
> start_values <- NULL
> block_sampleOccP <- FALSE
> bias_cor <- TRUE # Performing bias correction.
> 
> 
> # # Line by line assignments
> # use_shrinkage <- TRUE
> # cut_feed <- FALSE
> # p_occur_B <- O_V
> # p_occur_P <- O_P
> # focus <- obs_F
> # 
> # 
> # # --------------- TEST WITHOUT PARALLELIZATION -------------------#
> # 
> # t1 <- Sys.time()
> # mcmc <- MCMC(obs_A, focus = obs_F, p_occur_B = O_V, p_occur_P = O_P, obs_X, obs_W, Cu, Cv,
> #                           Nsims, burn, thin, use_H = 10, use_shrinkage = TRUE,
> #                           bias_cor = TRUE, theta_inf = 0.01,
> #                           mh_n_pis = 100, mh_n_pjs = 100, mh_n_rho = 100,
> #                           mh_pprior_sd = 0.1, mh_p_step = 0.1,
> #                           stick_alpha = 5, prior_theta = c(1, 1), prior_tau = c(5, 5),
> #                           prior_rho = c(5, 5), prior_mu0 = 0, prior_sigmasq0 = 10,
> #                           prior_sigmasq = c(1, 1), start_values = NULL,
> #                           sampling = sampling,
> #                           cut_feed = FALSE,
> #                           block_sampleOccP = block_sampleOccP)
> # Sys.time() - t1
> # 
> # 
> # # Binding different predictions of interest: Posterior samples of the
> # # interaction indicators, the linear predictor of the interaction model,
> # all_pred <- abind::abind(pred_L = mcmc$Ls, probL = mcmc$mod_pL1s, along = 4)
> # 
> # # Phylogenetic correlation parameter for bird and plant correlation matrices.
> # correlations <- cbind(U = mcmc$rU, V = mcmc$rV)
> # 
> # # Running mean of detection probabilities
> # p_detect <- list(pis = mcmc$pi_mean, pjs = mcmc$pj_mean)
> # 
> # # Running mean of latent factors
> # factors <- list(U = mcmc$U_mean, V = mcmc$V_mean)
> # 
> # # Occurrence probabilities for plants
> # occ_plants <- list(p_OPs = mcmc$p_OP_mean, p_accept = mcmc$p_OP_accepted)
> # 
> # # Combining the results we are interested in to a list and saving:
> # res <- list(all_pred = all_pred, correlations = correlations,
> #             p_detect = p_detect, factors = factors, occ_plants = occ_plants)
> # 
> # ## Compare prior to posterior mean occurrence probs
> # post.pi <- occ_plants$p_OPs
> # plot(x = c(p_occur_P), y = c(post.pi) , main = "Posterior vs Prior",
> #      xlab = "Prior Pi", ylab = "Post Mean Pi")
> # 
> # 
> 
> # --------------- STEP 2: SETUP PARALLEL ----------------- #
> 
> # # Set up function to execute in parallel
> n.chains <- 4
> mcmc.parallel <- function(cc, obs_A, focus = obs_F, p_occur_B = O_V, p_occur_P = O_P, obs_X, obs_W, Cu, Cv,
+                           Nsims, burn, thin, use_H = 10, use_shrinkage = TRUE,
+                           bias_cor = TRUE, theta_inf = 0.01,
+                           mh_n_pis = 100, mh_n_pjs = 100, mh_n_rho = 100,
+                           mh_pprior_sd = 0.1, mh_p_step = 0.1,
+                           stick_alpha = 5, prior_theta = c(1, 1), prior_tau = c(5, 5),
+                           prior_rho = c(5, 5), prior_mu0 = 0, prior_sigmasq0 = 10,
+                           prior_sigmasq = c(1, 1), start_values = NULL,
+                           sampling = sampling,
+                           cut_feed = FALSE,
+                           block_sampleOccP = block_sampleOccP){
+   
+ 
+ set.seed(cc)
+ 
+   ## Create a unique filename for each interation of the parallel loop
+   each_filename <- paste0('res_', date, '_', as.character(cc), '.dat')
+   each_filepath <- file.path(save_path, each_filename)
+   
+   mcmc <- MCMC(obs_A, focus, p_occur_B, p_occur_P, obs_X, obs_W, Cu, Cv,
+            Nsims, burn, thin, use_H = 10, use_shrinkage = TRUE,
+            bias_cor = TRUE, theta_inf = 0.01,
+            mh_n_pis = 100, mh_n_pjs = 100, mh_n_rho = 100,
+            mh_pprior_sd = 0.1, mh_p_step = 0.1,
+            stick_alpha = 5, prior_theta = c(1, 1), prior_tau = c(5, 5),
+            prior_rho = c(5, 5), prior_mu0 = 0, prior_sigmasq0 = 10,
+            prior_sigmasq = c(1, 1), start_values = NULL,
+            sampling = sampling, cut_feed = FALSE, 
+            block_sampleOccP = block_sampleOccP) 
+   
+   
+   # Binding different predictions of interest: Posterior samples of the
+   # interaction indicators, the linear predictor of the interaction model,
+   all_pred <- abind::abind(pred_L = mcmc$Ls, probL = mcmc$mod_pL1s, along = 4)
+   
+   # Phylogenetic correlation parameter for bird and plant correlation matrices.
+   correlations <- cbind(U = mcmc$rU, V = mcmc$rV)
+   
+   # Running mean of detection probabilities
+   p_detect <- list(pis = mcmc$pi_mean, pjs = mcmc$pj_mean)
+   
+   # Running mean of latent factors
+   factors <- list(U = mcmc$U_mean, V = mcmc$V_mean)
+   
+   # Imputed values of missing covariates
+   Xs <- mcmc$Xs
+   Ws <- mcmc$Ws
+   
+   # Occurrence probabilities for plants
+   occ_plants <- list(p_OPs = mcmc$p_OP_mean, p_accept = mcmc$p_OP_accepted) # DEBUG this is where the error was
+   occ_verts <- list(p_BPs = mcmc$p_OB_mean, p_accept = mcmc$p_OB_accepted) # DEBUG 
+   
+   # Combining the results we are interested in to a list and saving:
+   res <- list(all_pred = all_pred, correlations = correlations, 
+               p_detect = p_detect, factors = factors, occ_plants = occ_plants, 
+               occ_verts = occ_verts,  Xs = Xs, Ws = Ws)
+   save(res, file = each_filepath)
+   
+   rm(res)
+ }
> 
> #---------------------- STEP 3: RUN THE SAMPLER -------------------------------------------#
> t1 <- Sys.time()
> mclapply(1:n.chains, function(i) mcmc.parallel(cc=i,
+                                                 obs_A = obs_A, focus = obs_F, p_occur_B = O_V, p_occur_P = O_P,
+                                                 obs_X = obs_X, obs_W = obs_W, Cu = Cu, Cv = Cv,
+                                                 Nsims = Nsims, burn = burn, thin = thin,
+                                                 use_H = use_H, bias_cor = bias_cor,use_shrinkage = TRUE,
+                                                 theta_inf = theta_inf, mh_n_pis = mh_n_pis,
+                                                 mh_n_pjs = mh_n_pjs, mh_n_rho = mh_n_rho,
+                                                 mh_pprior_sd = 0.1, mh_p_step = 0.1,
+                                                 stick_alpha = stick_alpha, prior_theta = prior_theta,
+                                                 prior_tau = prior_tau, prior_rho = prior_rho,
+                                                 prior_mu0 = prior_mu0, prior_sigmasq0 = prior_sigmasq0,
+                                                 prior_sigmasq = prior_sigmasq, start_values = start_values,
+                                                 sampling = sampling, cut_feed = FALSE, 
+                                                 block_sampleOccP = block_sampleOccP),
+                            mc.cores = n.chains)
MCMC on 267 x 957 number of species.
MCMC on 267 x 957 number of species.
MCMC on 267 x 957 number of species.
MCMC on 267 x 957 number of species.
Total number of iterations: 24000
Total number of iterations: 24000
Total number of iterations: 24000
Total number of iterations: 24000
[1] 100
[1] 100
[1] 100
[1] 100
[1] 200
[1] 200
[1] 200
[1] 200
[1] 300
[1] 300
[1] 300
[1] 300
[1] 400
[1] 400
[1] 400
[1] 400
[1] 500
[1] 500
[1] 500
[1] 500
[1] 600
[1] 600
[1] 600
[1] 600
[1] 700
[1] 700
[1] 700
[1] 700
[1] 800
[1] 800
[1] 800
[1] 800
[1] 900
[1] 900
[1] 900
[1] 900
[1] 1000
[1] 1000
[1] 1000
[1] 1000
[1] 1100
[1] 1100
[1] 1100
[1] 1100
[1] 1200
[1] 1200
[1] 1200
[1] 1200
[1] 1300
[1] 1300
[1] 1300
[1] 1300
[1] 1400
[1] 1400
[1] 1400
[1] 1400
[1] 1500
[1] 1500
[1] 1500
[1] 1500
[1] 1600
[1] 1600
[1] 1600
[1] 1600
[1] 1700
[1] 1700
[1] 1700
[1] 1700
[1] 1800
[1] 1800
[1] 1800
[1] 1800
[1] 1900
[1] 1900
[1] 1900
[1] 1900
[1] 2000
[1] 2000
[1] 2000
[1] 2000
[1] 2100
[1] 2100
[1] 2100
[1] 2100
[1] 2200
[1] 2200
[1] 2200
[1] 2200
[1] 2300
[1] 2300
[1] 2300
[1] 2300
[1] 2400
[1] 2400
[1] 2400
[1] 2400
[1] 2500
[1] 2500
[1] 2500
[1] 2500
[1] 2600
[1] 2600
[1] 2600
[1] 2600
[1] 2700
[1] 2700
[1] 2700
[1] 2700
[1] 2800
[1] 2800
[1] 2800
[1] 2800
[1] 2900
[1] 2900
[1] 2900
[1] 2900
[1] 3000
[1] 3000
[1] 3000
[1] 3000
[1] 3100
[1] 3100
[1] 3100
[1] 3100
[1] 3200
[1] 3200
[1] 3200
[1] 3200
[1] 3300
[1] 3300
[1] 3300
[1] 3300
[1] 3400
[1] 3400
[1] 3400
[1] 3400
[1] 3500
[1] 3500
[1] 3500
[1] 3500
[1] 3600
[1] 3600
[1] 3600
[1] 3600
[1] 3700
[1] 3700
[1] 3700
[1] 3700
[1] 3800
[1] 3800
[1] 3800
[1] 3800
[1] 3900
[1] 3900
[1] 3900
[1] 3900
[1] 4000
[1] 4000
[1] 4000
[1] 4000
[1] 4100
[1] 4100
[1] 4100
[1] 4100
[1] 4200
[1] 4200
[1] 4200
[1] 4200
[1] 4300
[1] 4300
[1] 4300
[1] 4300
[1] 4400
[1] 4400
[1] 4400
[1] 4400
[1] 4500
[1] 4500
[1] 4500
[1] 4500
[1] 4600
[1] 4600
[1] 4600
[1] 4600
[1] 4700
[1] 4700
[1] 4700
[1] 4700
[1] 4800
[1] 4800
[1] 4800
[1] 4800
[1] 4900
[1] 4900
[1] 4900
[1] 4900
[1] 5000
[1] 5000
[1] 5000
[1] 5000
[1] 5100
[1] 5100
[1] 5100
[1] 5100
[1] 5200
[1] 5200
[1] 5200
[1] 5200
[1] 5300
[1] 5300
[1] 5300
[1] 5300
[1] 5400
[1] 5400
[1] 5400
[1] 5400
[1] 5500
[1] 5500
[1] 5500
[1] 5500
[1] 5600
[1] 5600
[1] 5600
[1] 5600
[1] 5700
[1] 5700
[1] 5700
[1] 5700
[1] 5800
[1] 5800
[1] 5800
[1] 5800
[1] 5900
[1] 5900
[1] 5900
[1] 5900
[1] 6000
[1] 6000
[1] 6000
[1] 6000
[1] 6100
[1] 6100
[1] 6100
[1] 6100
[1] 6200
[1] 6200
[1] 6200
[1] 6200
[1] 6300
[1] 6300
[1] 6300
[1] 6300
[1] 6400
[1] 6400
[1] 6400
[1] 6400
[1] 6500
[1] 6500
[1] 6500
[1] 6500
[1] 6600
[1] 6600
[1] 6600
[1] 6600
[1] 6700
[1] 6700
[1] 6700
[1] 6700
[1] 6800
[1] 6800
[1] 6800
[1] 6800
[1] 6900
[1] 6900
[1] 6900
[1] 6900
[1] 7000
[1] 7000
[1] 7000
[1] 7000
[1] 7100
[1] 7100
[1] 7100
[1] 7100
[1] 7200
[1] 7200
[1] 7200
[1] 7200
[1] 7300
[1] 7300
[1] 7300
[1] 7300
[1] 7400
[1] 7400
[1] 7400
[1] 7400
[1] 7500
[1] 7500
[1] 7500
[1] 7500
[1] 7600
[1] 7600
[1] 7600
[1] 7600
[1] 7700
[1] 7700
[1] 7700
[1] 7700
[1] 7800
[1] 7800
[1] 7800
[1] 7800
[1] 7900
[1] 7900
[1] 7900
[1] 7900
[1] 8000
[1] 8000
[1] 8000
[1] 8000
[1] 8100
[1] 8100
[1] 8100
[1] 8100
[1] 8200
[1] 8200
[1] 8200
[1] 8200
[1] 8300
[1] 8300
[1] 8300
[1] 8300
[1] 8400
[1] 8400
[1] 8400
[1] 8400
[1] 8500
[1] 8500
[1] 8500
[1] 8500
[1] 8600
[1] 8600
[1] 8600
[1] 8600
[1] 8700
[1] 8700
[1] 8700
[1] 8700
[1] 8800
[1] 8800
[1] 8800
[1] 8800
[1] 8900
[1] 8900
[1] 8900
[1] 8900
[1] 9000
[1] 9000
[1] 9000
[1] 9000
[1] 9100
[1] 9100
[1] 9100
[1] 9100
[1] 9200
[1] 9200
[1] 9200
[1] 9200
[1] 9300
[1] 9300
[1] 9300
[1] 9300
[1] 9400
[1] 9400
[1] 9400
[1] 9400
[1] 9500
[1] 9500
[1] 9500
[1] 9500
[1] 9600
[1] 9600
[1] 9600
[1] 9600
[1] 9700
[1] 9700
[1] 9700
[1] 9700
[1] 9800
[1] 9800
[1] 9800
[1] 9800
[1] 9900
[1] 9900
[1] 9900
[1] 9900
[1] 10000
[1] 10000
[1] 10000
[1] 10000
[1] 10100
[1] 10100
[1] 10100
[1] 10100
[1] 10200
[1] 10200
[1] 10200
[1] 10200
[1] 10300
[1] 10300
[1] 10300
[1] 10300
[1] 10400
[1] 10400
[1] 10400
[1] 10400
[1] 10500
[1] 10500
[1] 10500
[1] 10500
[1] 10600
[1] 10600
[1] 10600
[1] 10600
[1] 10700
[1] 10700
[1] 10700
[1] 10700
[1] 10800
[1] 10800
[1] 10800
[1] 10800
[1] 10900
[1] 10900
[1] 10900
[1] 10900
[1] 11000
[1] 11000
[1] 11000
[1] 11000
[1] 11100
[1] 11100
[1] 11100
[1] 11100
[1] 11200
[1] 11200
[1] 11200
[1] 11200
[1] 11300
[1] 11300
[1] 11300
[1] 11300
[1] 11400
[1] 11400
[1] 11400
[1] 11400
[1] 11500
[1] 11500
[1] 11500
[1] 11500
[1] 11600
[1] 11600
[1] 11600
[1] 11600
[1] 11700
[1] 11700
[1] 11700
[1] 11700
[1] 11800
[1] 11800
[1] 11800
[1] 11800
[1] 11900
[1] 11900
[1] 11900
[1] 11900
[1] 12000
[1] 12000
[1] 12000
[1] 12000
[1] 12100
[1] 12100
[1] 12100
[1] 12100
[1] 12200
[1] 12200
[1] 12200
[1] 12200
[1] 12300
[1] 12300
[1] 12300
[1] 12300
[1] 12400
[1] 12400
[1] 12400
[1] 12400
[1] 12500
[1] 12500
[1] 12500
[1] 12500
[1] 12600
[1] 12600
[1] 12600
[1] 12600
[1] 12700
[1] 12700
[1] 12700
[1] 12700
[1] 12800
[1] 12800
[1] 12800
[1] 12800
[1] 12900
[1] 12900
[1] 12900
[1] 12900
[1] 13000
[1] 13000
[1] 13000
[1] 13000
[1] 13100
[1] 13100
[1] 13100
[1] 13100
[1] 13200
[1] 13200
[1] 13200
[1] 13200
[1] 13300
[1] 13300
[1] 13300
[1] 13300
[1] 13400
[1] 13400
[1] 13400
[1] 13400
[1] 13500
[1] 13500
[1] 13500
[1] 13500
[1] 13600
[1] 13600
[1] 13600
[1] 13600
[1] 13700
[1] 13700
[1] 13700
[1] 13700
[1] 13800
[1] 13800
[1] 13800
[1] 13800
[1] 13900
[1] 13900
[1] 13900
[1] 13900
[1] 14000
[1] 14000
[1] 14000
[1] 14000
[1] 14100
[1] 14100
[1] 14100
[1] 14200
[1] 14100
[1] 14200
[1] 14200
[1] 14300
[1] 14200
[1] 14300
[1] 14300
[1] 14400
[1] 14300
[1] 14400
[1] 14400
[1] 14500
[1] 14400
[1] 14500
[1] 14500
[1] 14600
[1] 14500
[1] 14600
[1] 14600
[1] 14700
[1] 14600
[1] 14700
[1] 14700
[1] 14800
[1] 14700
[1] 14800
[1] 14800
[1] 14900
[1] 14800
[1] 14900
[1] 14900
[1] 15000
[1] 14900
[1] 15000
[1] 15000
[1] 15100
[1] 15000
[1] 15100
[1] 15100
[1] 15200
[1] 15100
[1] 15200
[1] 15200
[1] 15300
[1] 15200
[1] 15300
[1] 15300
[1] 15400
[1] 15300
[1] 15400
[1] 15400
[1] 15500
[1] 15400
[1] 15500
[1] 15500
[1] 15600
[1] 15500
[1] 15600
[1] 15600
[1] 15700
[1] 15600
[1] 15700
[1] 15700
[1] 15800
[1] 15700
[1] 15800
[1] 15800
[1] 15900
[1] 15900
[1] 15800
[1] 16000
[1] 15900
[1] 16000
[1] 15900
[1] 16100
[1] 16000
[1] 16100
[1] 16000
[1] 16200
[1] 16100
[1] 16200
[1] 16100
[1] 16300
[1] 16200
[1] 16300
[1] 16200
[1] 16400
[1] 16300
[1] 16400
[1] 16300
[1] 16500
[1] 16400
[1] 16500
[1] 16400
[1] 16600
[1] 16500
[1] 16600
[1] 16500
[1] 16700
[1] 16600
[1] 16700
[1] 16600
[1] 16800
[1] 16700
[1] 16800
[1] 16700
[1] 16900
[1] 16800
[1] 16900
[1] 16800
[1] 17000
[1] 16900
[1] 17000
[1] 16900
[1] 17100
[1] 17000
[1] 17100
[1] 17000
[1] 17200
[1] 17100
[1] 17200
[1] 17100
[1] 17300
[1] 17200
[1] 17300
[1] 17200
[1] 17400
[1] 17300
[1] 17400
[1] 17300
[1] 17500
[1] 17400
[1] 17500
[1] 17400
[1] 17600
[1] 17600
[1] 17500
[1] 17500
[1] 17700
[1] 17700
[1] 17600
[1] 17600
[1] 17800
[1] 17800
[1] 17700
[1] 17700
[1] 17900
[1] 17900
[1] 17800
[1] 17800
[1] 18000
[1] 18000
[1] 17900
[1] 17900
[1] 18100
[1] 18100
[1] 18000
[1] 18000
[1] 18200
[1] 18200
[1] 18100
[1] 18100
[1] 18300
[1] 18300
[1] 18200
[1] 18200
[1] 18400
[1] 18400
[1] 18300
[1] 18300
[1] 18500
[1] 18500
[1] 18400
[1] 18400
[1] 18600
[1] 18600
[1] 18500
[1] 18500
[1] 18700
[1] 18700
[1] 18600
[1] 18600
[1] 18800
[1] 18800
[1] 18700
[1] 18700
[1] 18900
[1] 18900
[1] 18800
[1] 18800
[1] 19000
[1] 19000
[1] 18900
[1] 18900
[1] 19100
[1] 19100
[1] 19000
[1] 19000
[1] 19200
[1] 19200
[1] 19100
[1] 19100
[1] 19300
[1] 19300
[1] 19200
[1] 19200
[1] 19400
[1] 19400
[1] 19300
[1] 19300
[1] 19500
[1] 19500
[1] 19400
[1] 19400
[1] 19600
[1] 19600
[1] 19500
[1] 19500
[1] 19700
[1] 19700
[1] 19600
[1] 19600
[1] 19800
[1] 19800
[1] 19700
[1] 19700
[1] 19900
[1] 19900
[1] 19800
[1] 19800
[1] 20000
[1] 20000
[1] 19900
[1] 19900
[1] 20100
[1] 20100
[1] 20000
[1] 20000
[1] 20200
[1] 20200
[1] 20100
[1] 20100
[1] 20300
[1] 20300
[1] 20200
[1] 20200
[1] 20400
[1] 20400
[1] 20300
[1] 20300
[1] 20500
[1] 20500
[1] 20400
[1] 20400
[1] 20600
[1] 20600
[1] 20500
[1] 20500
[1] 20700
[1] 20700
[1] 20600
[1] 20600
[1] 20800
[1] 20800
[1] 20700
[1] 20700
[1] 20900
[1] 20900
[1] 20800
[1] 20800
[1] 21000
[1] 21000
[1] 20900
[1] 20900
[1] 21100
[1] 21100
[1] 21000
[1] 21000
[1] 21200
[1] 21200
[1] 21100
[1] 21100
[1] 21300
[1] 21300
[1] 21200
[1] 21200
[1] 21400
[1] 21400
[1] 21300
[1] 21300
[1] 21500
[1] 21500
[1] 21400
[1] 21400
[1] 21600
[1] 21600
[1] 21500
[1] 21500
[1] 21700
[1] 21700
[1] 21600
[1] 21600
[1] 21800
[1] 21800
[1] 21700
[1] 21700
[1] 21900
[1] 21900
[1] 21800
[1] 21800
[1] 22000
[1] 22000
[1] 21900
[1] 21900
[1] 22100
[1] 22100
[1] 22000
[1] 22000
[1] 22200
[1] 22200
[1] 22100
[1] 22100
[1] 22300
[1] 22300
[1] 22200
[1] 22200
[1] 22400
[1] 22400
[1] 22300
[1] 22300
[1] 22500
[1] 22500
[1] 22400
[1] 22400
[1] 22600
[1] 22600
[1] 22500
[1] 22500
[1] 22700
[1] 22700
[1] 22600
[1] 22600
[1] 22800
[1] 22800
[1] 22700
[1] 22700
[1] 22900
[1] 22900
[1] 22800
[1] 22800
[1] 23000
[1] 23000
[1] 22900
[1] 22900
[1] 23100
[1] 23100
[1] 23000
[1] 23000
[1] 23200
[1] 23200
[1] 23100
[1] 23100
[1] 23300
[1] 23300
[1] 23200
[1] 23200
[1] 23400
[1] 23400
[1] 23300
[1] 23300
[1] 23500
[1] 23500
[1] 23400
[1] 23400
[1] 23600
[1] 23600
[1] 23500
[1] 23500
[1] 23700
[1] 23700
[1] 23600
[1] 23600
[1] 23800
[1] 23800
[1] 23700
[1] 23700
[1] 23900
[1] 23900
[1] 23800
[1] 23800
[1] 24000
[1] 24000
[1] 23900
[1] 23900
[1] 24000
[1] 24000
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

> 
> 
> 
> Sys.time() - t1
Time difference of 10.05424 days
> detectCores()
[1] 78
> 
> proc.time()
       user      system     elapsed 
3442553.585    4595.781  869263.203 
